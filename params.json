{"tagline":"Automated Web Application Test Framework for .NET","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"TestDrive","body":"## Overview\r\nTestDrive allows you to quickly and easily set up automated UI tests for highly-complex web applications.  The main goal of the framework is to greatly reduce the effort involved in creating automated tests.  Behind the scenes, the framework uses Selenium WebDriver and jQuery to drive its behavior.\r\n\r\n* **Automated UI Model Binding**\r\n* **Support for Nested Models**\r\n* **JQuery Selector Support**\r\n* **Timing Management**\r\n* **Email Testing**\r\n* **Dynamic Model Binding**\r\n* **T4 Template Generation**\r\n\r\n\r\n## Hello World\r\nTestDrive uses **Model** classes to represent the UI of a web application, and **Test** classes to run tests based on those models.  The following sample demos how one would wire a model to an HTML view, then test again it.\r\n\r\n**View**\r\n```HTML\r\n<input type=\"Text\" name=\"Say\" />\r\n<input type=\"submit\" value=\"Say\" />\r\n<div id=\"display\"></div>\r\n```\r\n**Model**\r\n```c#\r\n//All models and properties inherit from Tag\r\npublic class HelloWorldModel : Tag \r\n{\r\n    public TextBox SayTextBox; //input with name=\"Say\"\r\n\r\n    public SubmitButton SayButton; //first submit button\r\n\r\n    [Selector(\"#display\")]\r\n    public Tag Display; //div with id=\"display\"\r\n}\r\n```\r\n**Tests**\r\n```c#\r\n[TestFixture]\r\npublic class HelloWorldTests : TestBase //Inherits from TestBase\r\n{\r\n    [Test]\r\n    public void SayHello()\r\n    {\r\n        //Type hello world in textbox\r\n        //Models or auto-bound to UI\r\n        //HelloWorld property is auto-generated\r\n        HelloWorld.SayTextBox.Type(\"Hello World!\");\r\n\r\n        //Click save button\r\n        HelloWorld.SayButton.Click();\r\n\r\n        //Check for displayed result\r\n        //Timing is handled automatically\r\n        AssertTag.HasText(HelloWorld.Display, \"Hello World\");\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Model Binding & Selectors\r\nHTML elements can be bound to models in a variety of ways, including selectors, ID's, classes, fields names and conventions.\r\n\r\n**By jQuery Selector**\r\n```HTML\r\n<div id=\"my-div\"><span></span></div>\r\n```\r\n```c#\r\n[Selector(\"#my-div > Span\")]\r\npublic Tag Target;\r\n```\r\n\r\n**By ID**\r\n```HTML\r\n<div id=\"my-div\"></div>\r\n```\r\n```c#\r\n[Id(\"my-div\")]\r\npublic Tag Target;\r\n```\r\n\r\n**By Class**\r\n```HTML\r\n<div class=\"some-div\"></div>\r\n```\r\n```c#\r\n[Class(\"some-div\")]\r\npublic Tag Target;\r\n```\r\n\r\n**By Name**\r\n```HTML\r\n<input type=\"text\" name=\"my-password\" />\r\n```\r\n```c#\r\n[Name(\"my-password\")]\r\npublic TextBox Password;\r\n```\r\n\r\n**By Convention - Inputs**\r\n```HTML\r\n<input type=\"text\" name=\"Password\" />\r\n```\r\n```c#\r\npublic TextBox PasswordTextBox;\r\n```\r\n\r\n**By Convention - Links**\r\n```HTML\r\n<a href=\"#\">Register</a>\r\n```\r\n```c#\r\npublic Link RegisterLink;\r\n```\r\n\r\n\r\n## Nested Models\r\nModels can be nested within other models for binding to complex DOM structures.  Lists of tags are represented with the **TagCollection<T>**.\r\n\r\n**View**\r\n```HTML\r\n<div id=\"list\">\r\n\t<div id=\"row1\">\r\n\t\t<span id=\"title\"></span>\r\n\t\t<span id=\"description\"></span>\r\n\t</div>\r\n\t<div id=\"row2\">\r\n\t\t<span id=\"title\"></span>\r\n\t\t<span id=\"description\"></span>\r\n\t</div>\r\n</div>\r\n```\r\n**Model**\r\n```c#\r\n[Id(\"list\")]\r\npublic class ListModel : Tag\r\n{\r\n    public TagCollection<Row> Rows;\r\n\r\n    public class Row : Tag\r\n    {\r\n        [Class(\"title\")]\r\n        public Tag Title;\r\n\r\n        [Class(\"description\")]\r\n        public Tag Description;\r\n    }\r\n}\r\n```\r\n**Tests**\r\n```c#\r\n[Test]\r\npublic void ListTest()\r\n{\r\n    var count = List.Rows.Count;\r\n    var firstRow = List.Rows.First();\r\n    var secondRow = List.Rows.Get(1);\r\n    AssertTag.IsVisible(firstRow.Title);\r\n    AssertTag.HasText(secondRow.Description, \"Hello\");\r\n}\r\n```\r\n\r\n## Dynamic Model Binding\r\nOne of the main problems with most automated UI test frameworks is that the models are only bound to the HTML once, which can easily break in single page apps or highly-dynamic pages.   TestDrive solves this by running DOM queries on-demand.\r\n```c#\r\n//Textbox doesn't exist yet\r\nvar textbox = Page.RegistrationForm.PasswordTextBox;\r\n\r\n//Goto registration page\r\nBrowser.GoTo(\"/Registration\");\r\n\r\n//Textbox now exists\r\ntextbox.Type(\"Hello\");\r\n```\r\n\r\n## Email Tests\r\nTestDrive also has the ability to test HTML within emails via Pop3.  Email models are created in the same way as regular models, except they use the **[Email(subject)]** attribute.  Emails are identified by grabbing the first email with the provided subject.  The test email settings (username, password, host, etc.) must be defined in the config.  You can also configure the wait time for the email to be delivered to the account.\r\n\r\n**Email HTML**\r\n```HTML\r\n<div>\r\n    <h1>Registration Complete</h1>\r\n    <p><span>John<span>, your account has been registered.  Thank You!</p>\r\n    <a href=\"...\">Click here to access account</a>\r\n</div>\r\n```\r\n\r\n**Email Model**\r\n```c#\r\n//Email models are identified by subject\r\n[Email(\"Registration Complete\")]\r\npublic class RegistrationEmailModel : Tag \r\n{\r\n    public H1 Title; //H1 tag\r\n\r\n    [Selector(\"span:first\")]\r\n    public Tag NameDisplay; //first span\r\n\r\n    public Link AccessLink; //link with access in text\r\n}\r\n```\r\n\r\n**Email Tests**\r\n```c#\r\n[Test]\r\npublic void EmailTest()\r\n{\r\n    Form.NameTextBox.Type(\"John\");\r\n    Form.EmailTextBox.Type(\"myemail@mail.com\");\r\n    RegisterButton.Click();\r\n    AssertTag.Exists(RegistrationEmail);\r\n    Assert.That(RegistrationEmail.NameDisplay.Text == Form.NameTextBox.Text);\r\n}\r\n```\r\n\r\n## Custom Asserts - AssertTag\r\nThe library also contains several custom NUnit asserts for tags. The **AssertTag** class contains a number of methods specific used to test **Tag** classes.\r\n```c#\r\nAssertTag.Exists(tag); //Exists in DOM\r\nAssertTag.NotExists(tag); //Not in DOM\r\nAssertTag.IsVisible(tag); //Exists and visible\r\nAssertTag.IsNotVisible(tag); //Exists but not visible\r\nAssertTag.HasText(tag, \"Some random text\"); //Contains specified text\r\n```\r\n\r\n## Timing\r\nOne of the most common problem with UI testing is getting the timing correct.  If you try to access a tag before it has been loaded, an error can occur.  A quick and dirty, yet common, solution is to simply sleep for a set number of seconds.  TestDrive automatically handles the timing by waiting until an element exists or is visible.  \r\n\r\nFor instance, assume the user has just saved a record, and a success message is displayed either via a redirect or ajax. When the SuccessMessage tag is accessed, TestDrive will automatically pole the UI until the HTML element is available, before trying to access the HasText method.   The timeout is set to 10 seconds by default, but can be configured. \r\n```c#\r\nAssertTag.HasText(Page.SuccessMessage, \"Record has been saved.\");\r\n```","google":""}